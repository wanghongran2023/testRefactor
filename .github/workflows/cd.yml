name: Build and Deploy to EKS

on:
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  Build:
    name: Build Frontend and Backend and Upload to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Frontend
        working-directory: udagram-frontend
        run: |
          docker build -t frontend .

      - name: Build Backend
        working-directory: udagram-api
        run: |
          docker build -t backend .

      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Frontend image
        run: |
          docker tag frontend 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_FRONT }}:latest
          docker push 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_FRONT }}:latest

      - name: Push Backend image
        run: |
          docker tag backend 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_BACK }}:latest
          docker push 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_BACK }}:latest

  Deploy:
    name: Deploy ECR image to EKS
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Connect to EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name mycluster
      
      - name: Deploy Config and Secret
        working-directory: EKSdeploy
        run: |
          kubectl apply -f configmap.yml
          ENCODE_AWS_ACCESS_KEY_ID=$(echo "${{ secrets.AWS_ACCESS_KEY_ID}}" | base64 )
          ENCODE_AWS_SECRET_ACCESS_KEY=$(echo "${{ secrets.AWS_SECRET_ACCESS_KEY}}" | base64 )
          ENCODE_POSTGRES_USERNAME=$(echo "${{ secrets.POSTGRES_USERNAME}}" | base64 )
          ENCODE_POSTGRES_PASSWORD=$(echo "${{ secrets.POSTGRES_PASSWORD}}" | base64 )
          ENCODE_JWT_SECRET=$(echo "${{ secrets.JWT_SECRET}}" | base64 )

          sed -i "s|{temp_aws_access_key_id}|$ENCODE_AWS_ACCESS_KEY_ID|g" secret.yml
          sed -i "s|{temp_aws_secret_access_key}|$ENCODE_AWS_SECRET_ACCESS_KEY|g" secret.yml
          sed -i "s|{temp_postgres_username}|$ENCODE_POSTGRES_USERNAME|g" secret.yml
          sed -i "s|{temp_postgres_password}|$ENCODE_POSTGRES_PASSWORD|g" secret.yml
          sed -i "s|{temp_jwt_secret}|$ENCODE_JWT_SECRET|g" secret.yml

          kubectl apply -f secret.yml

      - name: Deploy Backend
        working-directory: EKSdeploy
        run: |
          kubectl apply -f backend-deploy.yml
          kubectl get pods 
          #kubectl apply -f backend-service.yml  # Only deploy at the first time
          kubectl get svc

      - name: Deploy Frontend
        working-directory: EKSdeploy
        run: |
          kubectl apply -f frontend-deploy.yml
          kubectl get pods
          #kubectl apply -f frontend-service.yml   # Only deploy at the first time
          kubectl get svc

