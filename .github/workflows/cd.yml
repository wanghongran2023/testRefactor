name: Build and Deploy to EKS

on:
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  Build:
    name: Build Frontend and Backend and Upload to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Frontend
        working-directory: udagram-frontend
        run: |
          docker build -t frontend .

      - name: Build Backend
        working-directory: udagram-api
        run: |
          echo "#!/bin/bash" > secret-script.sh
          echo "export AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\"" >> set_env.sh
          echo "export AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\"" >> set_env.sh
          echo "export AWS_DEFAULT_REGION=\"$AWS_DEFAULT_REGION\"" >> set_env.sh
          echo "export POSTGRES_USERNAME=\"$POSTGRES_USERNAME\"" >> set_env.sh
          echo "export POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\"" >> set_env.sh
          echo "export POSTGRES_HOST=\"$POSTGRES_HOST\"" >> set_env.sh
          echo "export POSTGRES_DB=\"$POSTGRES_DB\"" >> set_env.sh
          echo "export AWS_BUCKET=\"$AWS_BUCKET\"" >> set_env.sh
          echo "export AWS_REGION=\"$AWS_REGION\"" >> set_env.sh
          echo "export AWS_PROFILE=\"$AWS_PROFILE\"" >> set_env.sh
          echo "export JWT_SECRET=\"$JWT_SECRET\"" >> set_env.sh
          echo "export URL=\"$URL\"" >> set_env.sh
          chmod +x set_env.sh
          docker build -t backend .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          URL: ${{ secrets.URL }}

      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Frontend image
        run: |
          docker tag frontend 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_FRONT }}:latest
          docker push 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_FRONT }}:latest

      - name: Push Backend image
        run: |
          docker tag backend 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_BACK }}:latest
          docker push 823860120474.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_BACK }}:latest

  Deploy:
    name: Deploy ECR image to EKS
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Connect to EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name mycluster

      - name: Deploy Backend
        working-directory: EKSdeploy
        run: |
          kubectl apply -f backend-deploy.yml
          kubectl get pods 

